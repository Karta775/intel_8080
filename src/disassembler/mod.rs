/// Loops over every opcode in the array and translates each into mnemonics and descriptions
pub fn disassemble_ops(ops: &[u8]) {
    println!(
        "| {0: ^4} | {1: ^8} | {2: ^11} | {3: ^18} | {4: ^47} |",
        "pc", "opcode", "mnemonic", "flags", "function"
    );
    let mut i = 0;
    while i < ops.len() {
        i += disassemble_op(&ops[i..], i);
    }
}

/// Helper function that formats and prints the data
fn print_info(pc: usize, op: &str, mnemonic: &str, flags: &str, function: &str) {
    let pc_str = format!("{:04x}", pc);
    println!("| {0: <4} | {1: <8} | {2: <11} | {3: <18} | {4: <47} |",
             pc_str, op, mnemonic, flags, function);
}

/// Generates a string containing the correct number of bytes for an instruction
fn generate_op_string(ops: &[u8], size: usize) -> Option<String> {
    if ops.len() < size {
        return None;
    }

    // Generate the string of opcodes
    let mut op_string = format!("{:02x}", &ops[0]);
    for op in &ops[1..size] {
        op_string = format!("{} {:02x}", op_string, op);
    }

    Some(op_string)
}

/// Disassembles a single opcode by matching it against the instruction set
fn disassemble_op(ops: &[u8], pc: usize) -> usize {
    let op_1 = generate_op_string(&ops, 1).unwrap_or_default();
    let op_2 = generate_op_string(&ops, 2).unwrap_or_default();
    let op_3 = generate_op_string(&ops, 3).unwrap_or_default();

    match ops[0] { // This match returns some usize corresponding to the number of CPU cycles
        0x00 => { print_info(pc, &op_1, "NOP", "", ""); 1},
        0x01 => { print_info(pc, &op_3, "LXI B,D16", "", "B <- byte 3, C <- byte 2"); 3},
        0x02 => { print_info(pc, &op_1, "STAX B", "", "(BC) <- A"); 1},
        0x03 => { print_info(pc, &op_1, "INX B", "", "BC <- BC+1"); 1},
        0x04 => { print_info(pc, &op_1, "INR B", "Z, S, P, AC", "B <- B+1"); 1},
        0x05 => { print_info(pc, &op_1, "DCR B", "Z, S, P, AC", "B <- B-1"); 1},
        0x06 => { print_info(pc, &op_2, "MVI B, D8", "", "B <- byte 2"); 2},
        0x07 => { print_info(pc, &op_1, "RLC", "CY", "A = A << 1; bit 0 = prev bit 7; CY = prev bit 7"); 1},
        0x08 => { print_info(pc, &op_1, "-", "", ""); 1},
        0x09 => { print_info(pc, &op_1, "DAD B", "CY", "HL = HL + BC"); 1},
        0x0a => { print_info(pc, &op_1, "LDAX B", "", "A <- (BC)"); 1},
        0x0b => { print_info(pc, &op_1, "DCX B", "", "BC = BC-1"); 1},
        0x0c => { print_info(pc, &op_1, "INR C", "Z, S, P, AC", "C <- C+1"); 1},
        0x0d => { print_info(pc, &op_1, "DCR C", "Z, S, P, AC", "C <-C-1"); 1},
        0x0e => { print_info(pc, &op_2, "MVI C,D8", "", "C <- byte 2"); 2},
        0x0f => { print_info(pc, &op_1, "RRC", "CY", "A = A >> 1; bit 7 = prev bit 0; CY = prev bit 0"); 1},
        0x10 => { print_info(pc, &op_1, "-", "", ""); 1},
        0x11 => { print_info(pc, &op_3, "LXI D,D16", "", "D <- byte 3, E <- byte 2"); 3},
        0x12 => { print_info(pc, &op_1, "STAX D", "", "(DE) <- A"); 1},
        0x13 => { print_info(pc, &op_1, "INX D", "", "DE <- DE + 1"); 1},
        0x14 => { print_info(pc, &op_1, "INR D", "Z, S, P, AC", "D <- D+1"); 1},
        0x15 => { print_info(pc, &op_1, "DCR D", "Z, S, P, AC", "D <- D-1"); 1},
        0x16 => { print_info(pc, &op_2, "MVI D, D8", "", "D <- byte 2"); 2},
        0x17 => { print_info(pc, &op_1, "RAL", "CY", "A = A << 1; bit 0 = prev CY; CY = prev bit 7"); 1},
        0x18 => { print_info(pc, &op_1, "-", "", ""); 1},
        0x19 => { print_info(pc, &op_1, "DAD D", "CY", "HL = HL + DE"); 1},
        0x1a => { print_info(pc, &op_1, "LDAX D", "", "A <- (DE)"); 1},
        0x1b => { print_info(pc, &op_1, "DCX D", "", "DE = DE-1"); 1},
        0x1c => { print_info(pc, &op_1, "INR E", "Z, S, P, AC", "E <-E+1"); 1},
        0x1d => { print_info(pc, &op_1, "DCR E", "Z, S, P, AC", "E <- E-1"); 1},
        0x1e => { print_info(pc, &op_2, "MVI E,D8", "", "E <- byte 2"); 2},
        0x1f => { print_info(pc, &op_1, "RAR", "CY", "A = A >> 1; bit 7 = prev bit 7; CY = prev bit 0"); 1},
        0x20 => { print_info(pc, &op_1, "-", "", ""); 1},
        0x21 => { print_info(pc, &op_3, "LXI H,D16", "", "H <- byte 3, L <- byte 2"); 3},
        0x22 => { print_info(pc, &op_3, "SHLD adr", "", "(adr) <-L; (adr+1)<-H"); 3},
        0x23 => { print_info(pc, &op_1, "INX H", "", "HL <- HL + 1"); 1},
        0x24 => { print_info(pc, &op_1, "INR H", "Z, S, P, AC", "H <- H+1"); 1},
        0x25 => { print_info(pc, &op_1, "DCR H", "Z, S, P, AC", "H <- H-1"); 1},
        0x26 => { print_info(pc, &op_2, "MVI H,D8", "", "H <- byte 2"); 2},
        0x27 => { print_info(pc, &op_1, "DAA", "", "special"); 1},
        0x28 => { print_info(pc, &op_1, "-", "", ""); 1},
        0x29 => { print_info(pc, &op_1, "DAD H", "CY", "HL = HL + HI"); 1},
        0x2a => { print_info(pc, &op_3, "LHLD adr", "", "L <- (adr); H<-(adr+1)"); 3},
        0x2b => { print_info(pc, &op_1, "DCX H", "", "HL = HL-1"); 1},
        0x2c => { print_info(pc, &op_1, "INR L", "Z, S, P, AC", "L <- L+1"); 1},
        0x2d => { print_info(pc, &op_1, "DCR L", "Z, S, P, AC", "L <- L-1"); 1},
        0x2e => { print_info(pc, &op_2, "MVI L, D8", "", "L <- byte 2"); 2},
        0x2f => { print_info(pc, &op_1, "CMA", "", "A <- !A"); 1},
        0x30 => { print_info(pc, &op_1, "-", "", ""); 1},
        0x31 => { print_info(pc, &op_3, "LXI SP, D16", "", "SP.hi <- byte 3, SP.lo <- byte 2"); 3},
        0x32 => { print_info(pc, &op_3, "STA adr", "", "(adr) <- A"); 3},
        0x33 => { print_info(pc, &op_1, "INX SP", "", "SP = SP + 1"); 1},
        0x34 => { print_info(pc, &op_1, "INR M", "Z, S, P, AC", "(HL) <- (HL)+1"); 1},
        0x35 => { print_info(pc, &op_1, "DCR M", "Z, S, P, AC", "(HL) <- (HL)-1"); 1},
        0x36 => { print_info(pc, &op_2, "MVI M,D8", "", "(HL) <- byte 2"); 2},
        0x37 => { print_info(pc, &op_1, "STC", "CY", "CY = 1"); 1},
        0x38 => { print_info(pc, &op_1, "-", "", ""); 1},
        0x39 => { print_info(pc, &op_1, "DAD SP", "CY", "HL = HL + SP"); 1},
        0x3a => { print_info(pc, &op_3, "LDA adr", "", "A <- (adr)"); 3},
        0x3b => { print_info(pc, &op_1, "DCX SP", "", "SP = SP-1"); 1},
        0x3c => { print_info(pc, &op_1, "INR A", "Z, S, P, AC", "A <- A+1"); 1},
        0x3d => { print_info(pc, &op_1, "DCR A", "Z, S, P, AC", "A <- A-1"); 1},
        0x3e => { print_info(pc, &op_2, "MVI A,D8", "", "A <- byte 2"); 2},
        0x3f => { print_info(pc, &op_1, "CMC", "CY", "CY=!CY"); 1},
        0x40 => { print_info(pc, &op_1, "MOV B,B", "", "B <- B"); 1},
        0x41 => { print_info(pc, &op_1, "MOV B,C", "", "B <- C"); 1},
        0x42 => { print_info(pc, &op_1, "MOV B,D", "", "B <- D"); 1},
        0x43 => { print_info(pc, &op_1, "MOV B,E", "", "B <- E"); 1},
        0x44 => { print_info(pc, &op_1, "MOV B,H", "", "B <- H"); 1},
        0x45 => { print_info(pc, &op_1, "MOV B,L", "", "B <- L"); 1},
        0x46 => { print_info(pc, &op_1, "MOV B,M", "", "B <- (HL)"); 1},
        0x47 => { print_info(pc, &op_1, "MOV B,A", "", "B <- A"); 1},
        0x48 => { print_info(pc, &op_1, "MOV C,B", "", "C <- B"); 1},
        0x49 => { print_info(pc, &op_1, "MOV C,C", "", "C <- C"); 1},
        0x4a => { print_info(pc, &op_1, "MOV C,D", "", "C <- D"); 1},
        0x4b => { print_info(pc, &op_1, "MOV C,E", "", "C <- E"); 1},
        0x4c => { print_info(pc, &op_1, "MOV C,H", "", "C <- H"); 1},
        0x4d => { print_info(pc, &op_1, "MOV C,L", "", "C <- L"); 1},
        0x4e => { print_info(pc, &op_1, "MOV C,M", "", "C <- (HL)"); 1},
        0x4f => { print_info(pc, &op_1, "MOV C,A", "", "C <- A"); 1},
        0x50 => { print_info(pc, &op_1, "MOV D,B", "", "D <- B"); 1},
        0x51 => { print_info(pc, &op_1, "MOV D,C", "", "D <- C"); 1},
        0x52 => { print_info(pc, &op_1, "MOV D,D", "", "D <- D"); 1},
        0x53 => { print_info(pc, &op_1, "MOV D,E", "", "D <- E"); 1},
        0x54 => { print_info(pc, &op_1, "MOV D,H", "", "D <- H"); 1},
        0x55 => { print_info(pc, &op_1, "MOV D,L", "", "D <- L"); 1},
        0x56 => { print_info(pc, &op_1, "MOV D,M", "", "D <- (HL)"); 1},
        0x57 => { print_info(pc, &op_1, "MOV D,A", "", "D <- A"); 1},
        0x58 => { print_info(pc, &op_1, "MOV E,B", " ", "E <- B"); 1},
        0x59 => { print_info(pc, &op_1, "MOV E,C", "", "E <- C"); 1},
        0x5a => { print_info(pc, &op_1, "MOV E,D", "", "E <- D"); 1},
        0x5b => { print_info(pc, &op_1, "MOV E,E", "", "E <- E"); 1},
        0x5c => { print_info(pc, &op_1, "MOV E,H", "", "E <- H"); 1},
        0x5d => { print_info(pc, &op_1, "MOV E,L", "", "E <- L"); 1},
        0x5e => { print_info(pc, &op_1, "MOV E,M", "", "E <- (HL)"); 1},
        0x5f => { print_info(pc, &op_1, "MOV E,A", "", "E <- A"); 1},
        0x60 => { print_info(pc, &op_1, "MOV H,B", "", "H <- B"); 1},
        0x61 => { print_info(pc, &op_1, "MOV H,C", "", "H <- C"); 1},
        0x62 => { print_info(pc, &op_1, "MOV H,D", "", "H <- D"); 1},
        0x63 => { print_info(pc, &op_1, "MOV H,E", "", "H <- E"); 1},
        0x64 => { print_info(pc, &op_1, "MOV H,H", "", "H <- H"); 1},
        0x65 => { print_info(pc, &op_1, "MOV H,L", "", "H <- L"); 1},
        0x66 => { print_info(pc, &op_1, "MOV H,M", "", "H <- (HL)"); 1},
        0x67 => { print_info(pc, &op_1, "MOV H,A", "", "H <- A"); 1},
        0x68 => { print_info(pc, &op_1, "MOV L,B", "", "L <- B"); 1},
        0x69 => { print_info(pc, &op_1, "MOV L,C", "", "L <- C"); 1},
        0x6a => { print_info(pc, &op_1, "MOV L,D", "", "L <- D"); 1},
        0x6b => { print_info(pc, &op_1, "MOV L,E", "", "L <- E"); 1},
        0x6c => { print_info(pc, &op_1, "MOV L,H", "", "L <- H"); 1},
        0x6d => { print_info(pc, &op_1, "MOV L,L", "", "L <- L"); 1},
        0x6e => { print_info(pc, &op_1, "MOV L,M", "", "L <- (HL)"); 1},
        0x6f => { print_info(pc, &op_1, "MOV L,A", "", "L <- A"); 1},
        0x70 => { print_info(pc, &op_1, "MOV M,B", "", "(HL) <- B"); 1},
        0x71 => { print_info(pc, &op_1, "MOV M,C", "", "(HL) <- C"); 1},
        0x72 => { print_info(pc, &op_1, "MOV M,D", "", "(HL) <- D"); 1},
        0x73 => { print_info(pc, &op_1, "MOV M,E", "", "(HL) <- E"); 1},
        0x74 => { print_info(pc, &op_1, "MOV M,H", "", "(HL) <- H"); 1},
        0x75 => { print_info(pc, &op_1, "MOV M,L", "", "(HL) <- L"); 1},
        0x76 => { print_info(pc, &op_1, "HLT", "", "special"); 1},
        0x77 => { print_info(pc, &op_1, "MOV M,A", "", "(HL) <- A"); 1},
        0x78 => { print_info(pc, &op_1, "MOV A,B", "", "A <- B"); 1},
        0x79 => { print_info(pc, &op_1, "MOV A,C", "", "A <- C"); 1},
        0x7a => { print_info(pc, &op_1, "MOV A,D", "", "A <- D"); 1},
        0x7b => { print_info(pc, &op_1, "MOV A,E", "", "A <- E"); 1},
        0x7c => { print_info(pc, &op_1, "MOV A,H", "", "A <- H"); 1},
        0x7d => { print_info(pc, &op_1, "MOV A,L", "", "A <- L"); 1},
        0x7e => { print_info(pc, &op_1, "MOV A,M", "", "A <- (HL)"); 1},
        0x7f => { print_info(pc, &op_1, "MOV A,A", "", "A <- A"); 1},
        0x80 => { print_info(pc, &op_1, "ADD B", "Z, S, P, CY, AC", "A <- A + B"); 1},
        0x81 => { print_info(pc, &op_1, "ADD C", "Z, S, P, CY, AC", "A <- A + C"); 1},
        0x82 => { print_info(pc, &op_1, "ADD D", "Z, S, P, CY, AC", "A <- A + D"); 1},
        0x83 => { print_info(pc, &op_1, "ADD E", "Z, S, P, CY, AC", "A <- A + E"); 1},
        0x84 => { print_info(pc, &op_1, "ADD H", "Z, S, P, CY, AC", "A <- A + H"); 1},
        0x85 => { print_info(pc, &op_1, "ADD L", "Z, S, P, CY, AC", "A <- A + L"); 1},
        0x86 => { print_info(pc, &op_1, "ADD M", "Z, S, P, CY, AC", "A <- A + (HL)"); 1},
        0x87 => { print_info(pc, &op_1, "ADD A", "Z, S, P, CY, AC", "A <- A + A"); 1},
        0x88 => { print_info(pc, &op_1, "ADC B", "Z, S, P, CY, AC", "A <- A + B + CY"); 1},
        0x89 => { print_info(pc, &op_1, "ADC C", "Z, S, P, CY, AC", "A <- A + C + CY"); 1},
        0x8a => { print_info(pc, &op_1, "ADC D", "Z, S, P, CY, AC", "A <- A + D + CY"); 1},
        0x8b => { print_info(pc, &op_1, "ADC E", "Z, S, P, CY, AC", "A <- A + E + CY"); 1},
        0x8c => { print_info(pc, &op_1, "ADC H", "Z, S, P, CY, AC", "A <- A + H + CY"); 1},
        0x8d => { print_info(pc, &op_1, "ADC L", "Z, S, P, CY, AC", "A <- A + L + CY"); 1},
        0x8e => { print_info(pc, &op_1, "ADC M", "Z, S, P, CY, AC", "A <- A + (HL) + CY"); 1},
        0x8f => { print_info(pc, &op_1, "ADC A", "Z, S, P, CY, AC", "A <- A + A + CY"); 1},
        0x90 => { print_info(pc, &op_1, "SUB B", "Z, S, P, CY, AC", "A <- A - B"); 1},
        0x91 => { print_info(pc, &op_1, "SUB C", "Z, S, P, CY, AC", "A <- A - C"); 1},
        0x92 => { print_info(pc, &op_1, "SUB D", "Z, S, P, CY, AC", "A <- A + D"); 1},
        0x93 => { print_info(pc, &op_1, "SUB E", "Z, S, P, CY, AC", "A <- A - E"); 1},
        0x94 => { print_info(pc, &op_1, "SUB H", "Z, S, P, CY, AC", "A <- A + H"); 1},
        0x95 => { print_info(pc, &op_1, "SUB L", "Z, S, P, CY, AC", "A <- A - L"); 1},
        0x96 => { print_info(pc, &op_1, "SUB M", "Z, S, P, CY, AC", "A <- A + (HL)"); 1},
        0x97 => { print_info(pc, &op_1, "SUB A", "Z, S, P, CY, AC", "A <- A - A"); 1},
        0x98 => { print_info(pc, &op_1, "SBB B", "Z, S, P, CY, AC", "A <- A - B - CY"); 1},
        0x99 => { print_info(pc, &op_1, "SBB C", "Z, S, P, CY, AC", "A <- A - C - CY"); 1},
        0x9a => { print_info(pc, &op_1, "SBB D", "Z, S, P, CY, AC", "A <- A - D - CY"); 1},
        0x9b => { print_info(pc, &op_1, "SBB E", "Z, S, P, CY, AC", "A <- A - E - CY"); 1},
        0x9c => { print_info(pc, &op_1, "SBB H", "Z, S, P, CY, AC", "A <- A - H - CY"); 1},
        0x9d => { print_info(pc, &op_1, "SBB L", "Z, S, P, CY, AC", "A <- A - L - CY"); 1},
        0x9e => { print_info(pc, &op_1, "SBB M", "Z, S, P, CY, AC", "A <- A - (HL) - CY"); 1},
        0x9f => { print_info(pc, &op_1, "SBB A", "Z, S, P, CY, AC", "A <- A - A - CY"); 1},
        0xa0 => { print_info(pc, &op_1, "ANA B", "Z, S, P, CY, AC", "A <- A & B"); 1},
        0xa1 => { print_info(pc, &op_1, "ANA C", "Z, S, P, CY, AC", "A <- A & C"); 1},
        0xa2 => { print_info(pc, &op_1, "ANA D", "Z, S, P, CY, AC", "A <- A & D"); 1},
        0xa3 => { print_info(pc, &op_1, "ANA E", "Z, S, P, CY, AC", "A <- A & E"); 1},
        0xa4 => { print_info(pc, &op_1, "ANA H", "Z, S, P, CY, AC", "A <- A & H"); 1},
        0xa5 => { print_info(pc, &op_1, "ANA L", "Z, S, P, CY, AC", "A <- A & L"); 1},
        0xa6 => { print_info(pc, &op_1, "ANA M", "Z, S, P, CY, AC", "A <- A & (HL)"); 1},
        0xa7 => { print_info(pc, &op_1, "ANA A", "Z, S, P, CY, AC", "A <- A & A"); 1},
        0xa8 => { print_info(pc, &op_1, "XRA B", "Z, S, P, CY, AC", "A <- A ^ B"); 1},
        0xa9 => { print_info(pc, &op_1, "XRA C", "Z, S, P, CY, AC", "A <- A ^ C"); 1},
        0xaa => { print_info(pc, &op_1, "XRA D", "Z, S, P, CY, AC", "A <- A ^ D"); 1},
        0xab => { print_info(pc, &op_1, "XRA E", "Z, S, P, CY, AC", "A <- A ^ E"); 1},
        0xac => { print_info(pc, &op_1, "XRA H", "Z, S, P, CY, AC", "A <- A ^ H"); 1},
        0xad => { print_info(pc, &op_1, "XRA L", "Z, S, P, CY, AC", "A <- A ^ L"); 1},
        0xae => { print_info(pc, &op_1, "XRA M", "Z, S, P, CY, AC", "A <- A ^ (HL)"); 1},
        0xaf => { print_info(pc, &op_1, "XRA A", "Z, S, P, CY, AC", "A <- A ^ A"); 1},
        0xb0 => { print_info(pc, &op_1, "ORA B", "Z, S, P, CY, AC", "A <- A | B"); 1},
        0xb1 => { print_info(pc, &op_1, "ORA C", "Z, S, P, CY, AC", "A <- A | C"); 1},
        0xb2 => { print_info(pc, &op_1, "ORA D", "Z, S, P, CY, AC", "A <- A | D"); 1},
        0xb3 => { print_info(pc, &op_1, "ORA E", "Z, S, P, CY, AC", "A <- A | E"); 1},
        0xb4 => { print_info(pc, &op_1, "ORA H", "Z, S, P, CY, AC", "A <- A | H"); 1},
        0xb5 => { print_info(pc, &op_1, "ORA L", "Z, S, P, CY, AC", "A <- A | L"); 1},
        0xb6 => { print_info(pc, &op_1, "ORA M", "Z, S, P, CY, AC", "A <- A | (HL)"); 1},
        0xb7 => { print_info(pc, &op_1, "ORA A", "Z, S, P, CY, AC", "A <- A | A"); 1},
        0xb8 => { print_info(pc, &op_1, "CMP B", "Z, S, P, CY, AC", "A - B"); 1},
        0xb9 => { print_info(pc, &op_1, "CMP C", "Z, S, P, CY, AC", "A - C"); 1},
        0xba => { print_info(pc, &op_1, "CMP D", "Z, S, P, CY, AC", "A - D"); 1},
        0xbb => { print_info(pc, &op_1, "CMP E", "Z, S, P, CY, AC", "A - E"); 1},
        0xbc => { print_info(pc, &op_1, "CMP H", "Z, S, P, CY, AC", "A - H"); 1},
        0xbd => { print_info(pc, &op_1, "CMP L", "Z, S, P, CY, AC", "A - L"); 1},
        0xbe => { print_info(pc, &op_1, "CMP M", "Z, S, P, CY, AC", "A - (HL)"); 1},
        0xbf => { print_info(pc, &op_1, "CMP A", "Z, S, P, CY, AC", "A - A"); 1},
        0xc0 => { print_info(pc, &op_1, "RNZ", "", "if NZ, RET"); 1},
        0xc1 => { print_info(pc, &op_1, "POP B", "", "C <- (sp); B <- (sp+1); sp <- sp+2"); 1},
        0xc2 => { print_info(pc, &op_3, "JNZ adr", "", "if NZ, PC <- adr"); 3},
        0xc3 => { print_info(pc, &op_3, "JMP adr", "", "PC <= adr"); 3},
        0xc4 => { print_info(pc, &op_3, "CNZ adr", "", "if NZ, CALL adr"); 3},
        0xc5 => { print_info(pc, &op_1, "PUSH B", "", "(sp-2)<-C; (sp-1)<-B; sp <- sp - 2"); 1},
        0xc6 => { print_info(pc, &op_2, "ADI D8", "Z, S, P, CY, AC", "A <- A + byte"); 2},
        0xc7 => { print_info(pc, &op_1, "RST 0", "", "CALL $0"); 1},
        0xc8 => { print_info(pc, &op_1, "RZ", "", "if Z, RET"); 1},
        0xc9 => { print_info(pc, &op_1, "RET", "", "PC.lo <- (sp); PC.hi<-(sp+1); SP <- SP+2"); 1},
        0xca => { print_info(pc, &op_3, "JZ adr", "", "if Z, PC <- adr"); 3},
        0xcb => { print_info(pc, &op_1, "-", "", ""); 1},
        0xcc => { print_info(pc, &op_3, "CZ adr", "", "if Z, CALL adr"); 3},
        0xcd => { print_info(pc, &op_3, "CALL adr", "", "(SP-1)<-PC.hi;(SP-2)<-PC.lo;SP<-SP-2;PC=adr"); 3},
        0xce => { print_info(pc, &op_2, "ACI D8", "Z, S, P, CY, AC", "A <- A + data + CY"); 2},
        0xcf => { print_info(pc, &op_1, "RST 1", "", "CALL $8"); 1},
        0xd0 => { print_info(pc, &op_1, "RNC", "", "if NCY, RET"); 1},
        0xd1 => { print_info(pc, &op_1, "POP D", "", "E <- (sp); D <- (sp+1); sp <- sp+2"); 1},
        0xd2 => { print_info(pc, &op_3, "JNC adr", "", "if NCY, PC<-adr"); 3},
        0xd3 => { print_info(pc, &op_2, "OUT D8", "", "special"); 2},
        0xd4 => { print_info(pc, &op_3, "CNC adr", "", "if NCY, CALL adr"); 3},
        0xd5 => { print_info(pc, &op_1, "PUSH D", "", "(sp-2)<-E; (sp-1)<-D; sp <- sp - 2"); 1},
        0xd6 => { print_info(pc, &op_2, "SUI D8", "Z, S, P, CY, AC", "A <- A - data"); 2},
        0xd7 => { print_info(pc, &op_1, "RST 2", "", "CALL $10"); 1},
        0xd8 => { print_info(pc, &op_1, "RC", "", "if CY, RET"); 1},
        0xd9 => { print_info(pc, &op_1, "-", "", ""); 1},
        0xda => { print_info(pc, &op_3, "JC adr", "", "if CY, PC<-adr"); 3},
        0xdb => { print_info(pc, &op_2, "IN D8", "", "special"); 2},
        0xdc => { print_info(pc, &op_3, "CC adr", "", "if CY, CALL adr"); 3},
        0xdd => { print_info(pc, &op_1, "-", "", ""); 1},
        0xde => { print_info(pc, &op_2, "SBI D8", "Z, S, P, CY, AC", "A <- A - data - CY"); 2},
        0xdf => { print_info(pc, &op_1, "RST 3", "", "CALL $18"); 1},
        0xe0 => { print_info(pc, &op_1, "RPO", "", "if PO, RET"); 1},
        0xe1 => { print_info(pc, &op_1, "POP H", "", "L <- (sp); H <- (sp+1); sp <- sp+2"); 1},
        0xe2 => { print_info(pc, &op_3, "JPO adr", "", "if PO, PC <- adr"); 3},
        0xe3 => { print_info(pc, &op_1, "XTHL", "", "L <-> (SP); H <-> (SP+1) "); 1},
        0xe4 => { print_info(pc, &op_3, "CPO adr", "", "if PO, CALL adr"); 3},
        0xe5 => { print_info(pc, &op_1, "PUSH H", "", "(sp-2)<-L; (sp-1)<-H; sp <- sp - 2"); 1},
        0xe6 => { print_info(pc, &op_2, "ANI D8", "Z, S, P, CY, AC", "A <- A & data"); 2},
        0xe7 => { print_info(pc, &op_1, "RST 4", "", "CALL $20"); 1},
        0xe8 => { print_info(pc, &op_1, "RPE", "", "if PE, RET"); 1},
        0xe9 => { print_info(pc, &op_1, "PCHL", "", "PC.hi <- H; PC.lo <- L"); 1},
        0xea => { print_info(pc, &op_3, "JPE adr", "", "if PE, PC <- adr"); 3},
        0xeb => { print_info(pc, &op_1, "XCHG", "", "H <-> D; L <-> E"); 1},
        0xec => { print_info(pc, &op_3, "CPE adr", "", "if PE, CALL adr"); 3},
        0xed => { print_info(pc, &op_1, "-", "", ""); 1},
        0xee => { print_info(pc, &op_2, "XRI D8", "Z, S, P, CY, AC", "A <- A ^ data"); 2},
        0xef => { print_info(pc, &op_1, "RST 5", "", "CALL $28"); 1},
        0xf0 => { print_info(pc, &op_1, "RP", "", "if P, RET"); 1},
        0xf1 => { print_info(pc, &op_1, "POP PSW", "", "flags <- (sp); A <- (sp+1); sp <- sp+2"); 1},
        0xf2 => { print_info(pc, &op_3, "JP adr", "", "if P=1 PC <- adr"); 3},
        0xf3 => { print_info(pc, &op_1, "DI", "", "special"); 1},
        0xf4 => { print_info(pc, &op_3, "CP adr", "", "if P, PC <- adr"); 3},
        0xf5 => { print_info(pc, &op_1, "PUSH PSW", "", "(sp-2)<-flags; (sp-1)<-A; sp <- sp - 2"); 1},
        0xf6 => { print_info(pc, &op_2, "ORI D8", "Z, S, P, CY, AC", "A <- A | data"); 2},
        0xf7 => { print_info(pc, &op_1, "RST 6", "", "CALL $30"); 1},
        0xf8 => { print_info(pc, &op_1, "RM", "", "if M, RET"); 1},
        0xf9 => { print_info(pc, &op_1, "SPHL", "", "SP=HL"); 1},
        0xfa => { print_info(pc, &op_3, "JM adr", "", "if M, PC <- adr"); 3},
        0xfb => { print_info(pc, &op_1, "EI", "", "special"); 1},
        0xfc => { print_info(pc, &op_3, "CM adr", "", "if M, CALL adr"); 3},
        0xfd => { print_info(pc, &op_1, "-", "", ""); 1},
        0xfe => { print_info(pc, &op_2, "CPI D8", "Z, S, P, CY, AC", "A - data"); 2},
        0xff => { print_info(pc, &op_1, "RST 7", "", "CALL $38"); 1},
        _ => 0 // Unfortunately CLion's Rust plugin requires this although it compiles fine without.
    }
}
